#include <ilcplex/ilocplex.h>
ILOSTLBEGIN

const int N_Types   = 3;
const int N_Periods = 5;

const double len[] = {    6,     3,     6,     3,     6};
const double dem[] = {15000, 30000, 25000, 40000, 27000};

const double   cost_min[] = {1000, 2600, 3000};
const double   cost_x_h[] = {   2,  1.3,    3};
const double   cost_ini[] = {2000, 1000,  500};
const double min_output[] = { 850, 1250, 1500};
const double max_output[] = {2000, 1750, 4000};
const double avail_unit[] = {  12,   10,    5};

const double ratio = 1.15;

int prev(int p) {
  if (p > 0) return p-1;
  else       return N_Periods-1;
}

// n(i, j) = Number of units of type i active   in period j.
// s(i, j) = Number of units of type i starting in period j.
// x(i, j) = MW generated by units of type i    in period j.

IloNumVarArray N;
IloNumVarArray S;
IloNumVarArray X;

IloNumVar n(int i, int j) { return N[i * N_Periods + j]; }
IloNumVar s(int i, int j) { return S[i * N_Periods + j]; }
IloNumVar x(int i, int j) { return X[i * N_Periods + j]; }


int main () {

  IloEnv             env;
  IloModel     model(env);

  N = IloNumVarArray(env, N_Types * N_Periods, 0, IloInfinity, ILOINT);
  S = IloNumVarArray(env, N_Types * N_Periods, 0, IloInfinity, ILOINT);
  X = IloNumVarArray(env, N_Types * N_Periods, 0, IloInfinity, ILOFLOAT);

  for (int t = 0; t < N_Types; ++t)
    for (int p = 0; p < N_Periods; ++p)
      model.add( n(t, p) <= avail_unit[t] );

  for (int p = 0; p < N_Periods; ++p) {
    IloExpr expr(env);
    for (int t = 0; t < N_Types; ++t)
      expr += x(t, p);

    model.add( expr >= dem[p]);
    expr.end();
  }

  for (int t = 0; t < N_Types; ++t)
    for (int p = 0; p < N_Periods; ++p) {
      model.add( x(t, p) >= min_output[t] * n(t, p) );
      model.add( x(t, p) <= max_output[t] * n(t, p) );
    }

  for (int p = 0; p < N_Periods; ++p) {
    IloExpr expr(env);
    for (int t = 0; t < N_Types; ++t)
      expr += max_output[t] * n(t, p);

    model.add( expr >= ratio * dem[p]);
    expr.end();
  }

  for (int t = 0; t < N_Types; ++t)
    for (int p = 0; p < N_Periods; ++p)
      model.add( s(t, p) >= n(t, p) - n(t, prev(p)));

  IloExpr obj(env);

  for (int t = 0; t < N_Types; ++t)
    for (int p = 0; p < N_Periods; ++p) {
      obj +=
	cost_min[t] * len[p] *  n(t, p) +
	cost_x_h[t] * len[p] * (x(t, p) - min_output[t] * n(t, p)) +
	cost_ini[t] * s(t, p);
    }
  model.add(IloMinimize(env, obj));
  obj.end();

  IloCplex cplex(model);
  cplex.solve();
  cout << cplex.getObjValue() << endl;
  env.end();
}
